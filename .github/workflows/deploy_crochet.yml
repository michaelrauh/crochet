name: Provision and Deploy Crochet

on:
  push:
    branches:
      - main
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - 'src/**'

jobs:
  provision_and_deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.DO_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SECRET_KEY }}
      TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_access_key: ${{ secrets.DO_ACCESS_KEY }}
      TF_VAR_do_secret_key: ${{ secrets.DO_SECRET_KEY }}
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_rabbitmq_password: ${{ secrets.RABBITMQ_PASSWORD }}
      TF_VAR_ssh_fingerprint: ${{ secrets.SSH_FINGERPRINT }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t crochet:latest -f ./Dockerfile .

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.4/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: do
          password: ${{ secrets.DIGITALOCEAN_REGISTRY_TOKEN }}

      - name: Tag Docker Image
        run: docker tag crochet:latest registry.digitalocean.com/crochet-registry/crochet:latest

      - name: Push Docker Image
        run: docker push registry.digitalocean.com/crochet-registry/crochet:latest

      - name: Retrieve Database URL
        id: database_url
        run: |
          set +x
          DATABASE_URL=$(terraform output -raw database_url)
          echo "::add-mask::$DATABASE_URL"
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

      - name: Retrieve RabbitMQ Connection String
        id: rabbitmq_connection
        run: |
          set +x
          RABBITMQ_CONNECTION=$(terraform output -raw rabbitmq_connection_string)
          echo "::add-mask::$RABBITMQ_CONNECTION"
          echo "RABBITMQ_CONNECTION=$RABBITMQ_CONNECTION" >> $GITHUB_ENV

      - name: Deploy to DigitalOcean Kubernetes
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          
      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save crochet-doks-cluster

      - name: Deploy Kubernetes Manifest
        run: kubectl apply -f k8s/deployment.yml --namespace default

      - name: Set Kubernetes Environment Variables and Update Image
        run: |
          kubectl set env deployment/crochet DATABASE_URL=${{ env.DATABASE_URL }} --namespace default
          kubectl set env deployment/crochet RABBITMQ_CONNECTION=${{ env.RABBITMQ_CONNECTION }} --namespace default
          kubectl set image deployment/crochet crochet=registry.digitalocean.com/crochet-registry/crochet:latest --namespace default